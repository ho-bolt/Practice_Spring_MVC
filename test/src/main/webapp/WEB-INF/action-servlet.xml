<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

		<!-- 2번 방법 @controller과 @requestMapping -->
		<!-- command객체를 불러낼 때 필요한 xml위치는 여기 -->
	<context:component-scan base-package="com.test.view"/>	
	
	
	<!-- <mvc:annotation-driven></mvc:annotation-driven> 예외처리할 때 필요한 어노테이션을 확인할 수 있다.  -->
	<!-- xml로 에러처리화면  -->
<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	<property name="exceptionMappings">
		<props>
			<prop key="java.lang.NullPointerException">
				login.jsp<!-- 이 key에 있는 예외는 이 페이지로 가! 라고 얘기하는 것 -->
			</prop>
		</props>
	</property>
		<property name="defaultErrorView" value="/controllerError/error.jsp"></property>
	</bean>
	
	<!-- 이름의 끝이 Resolver로 되는 애는 이름이 고정이다. command객체 처리는 완료 -->
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000"/><!-- 필수는 아니지만 안넣으면 -1로 들어감 즉 크기 제한이 없다는 말  -->
	</bean>
	
	<!-- messageSource파일을 읽어야 해서 객체 만들어서 넣어준다. 대상체 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
			<!-- <value>message.messageSource_en.properties</value>
					 하지만 컨테이너는 얘가 패기지인지 확장자인지 구분을 못함
					 언어처리 하는 확장자는 무조건 properties이다. 따라서 그냥 생략한다.  
					그냥 아래처럼 적으면 됨
			 -->
				<value>message.messageSource</value>
			</list>
		</property>
   </bean>
   <!-- 위의 대상체를 서비스해줄 친구 -->
   <bean id="localReslover" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>
   <mvc:interceptors>
   	<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
   		<property name="paramName" value="Lang"/>
   	</bean>
   </mvc:interceptors>
   
   <!-- 다국어 처리를 한다.  -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>
	<mvc:interceptors>
		<bean
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="lang" />
		</bean>
	</mvc:interceptors>
	
	
	
	<!-- 1번 방법
	이것은 controller만들어서 한 것, 이제는 매핑하지 말고, @을 이용하여 할 예정 
	 handlerMapping 등록 
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/insertMember.do">insertMember</prop>
				<prop key="/login.do">login</prop>
				<prop key="/insertMsg.do">insertMsg</prop>
				<prop key="/getMsgList.do">getMsgList</prop>
				<prop key="/getMsg.do">getMsg</prop>
				<prop key="/updateMsg.do">update</prop>
				<prop key="/deleteMsg.do">delete</prop>
			
			</props>
		</property>	
	</bean>
				
			메소드에 @Controller를 붙인 것은 이것을 대신 한 것이다. 
			하지만 handlerMapping을 할 친구가 없기 때문에 그것을 할 @이 필요하다. 
			그것이 바로 RequestMapping
			
			
				
			 controller 목록
			<bean id="insertMember" class="com.test.view.member.InsertMemberController"/>
			<bean id="login" class="com.test.view.member.LoginController"/>			
			<bean id="insertMsg" class="com.test.view.message.InsertMsgController"/>
			<bean id="getMsgList" class="com.test.view.message.GetMsgListController"/>
			<bean id="getMsg" class="com.test.view.message.GetMsgController"/>
			<bean id="update" class="com.test.view.message.UpdateMsgController"/>
			<bean id="delete" class="com.test.view.message.DeleteMsgController"/>
			 -->
</beans>
